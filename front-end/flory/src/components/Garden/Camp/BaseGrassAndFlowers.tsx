/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 ./public/models/camp_map.glb -t
*/

import * as THREE from "three";
import React, { useRef } from "react";
import {
  useGLTF,
  PerspectiveCamera,
  OrthographicCamera,
} from "@react-three/drei";
import { GLTF } from "three-stdlib";
import CameraAndLight from "./CameraAndLight";
import FlowersWrapper from "../../Flowers/FlowersWrapper";

type GLTFResult = GLTF & {
  nodes: {
    Plane004: THREE.Mesh;
    Plane012: THREE.Mesh;
    Plane: THREE.Mesh;
    Plane001: THREE.Mesh;
    Vert: THREE.Mesh;
    Roundcube: THREE.Mesh;
    Roundcube001: THREE.Mesh;
    Roundcube002: THREE.Mesh;
    Roundcube003: THREE.Mesh;
    Roundcube004: THREE.Mesh;
    Roundcube005: THREE.Mesh;
    Roundcube006: THREE.Mesh;
    Roundcube007: THREE.Mesh;
    Roundcube008: THREE.Mesh;
    Plane003: THREE.Mesh;
    Plane002: THREE.Mesh;
    Circle001: THREE.Mesh;
    Circle002: THREE.Mesh;
    Circle003: THREE.Mesh;
    Circle004: THREE.Mesh;
    Circle005: THREE.Mesh;
    Circle006: THREE.Mesh;
    Circle007: THREE.Mesh;
    Circle008: THREE.Mesh;
    Plane031: THREE.Mesh;
    Plane005: THREE.Mesh;
    Plane006: THREE.Mesh;
    Plane007: THREE.Mesh;
    Plane008: THREE.Mesh;
    Plane009: THREE.Mesh;
    Plane010: THREE.Mesh;
    Plane011: THREE.Mesh;
    Plane021: THREE.Mesh;
    Plane022: THREE.Mesh;
    Plane023: THREE.Mesh;
    Plane024: THREE.Mesh;
    Plane025: THREE.Mesh;
    Plane026: THREE.Mesh;
    Plane027: THREE.Mesh;
    Plane028: THREE.Mesh;
    Vert004: THREE.Mesh;
    Mesh_34: THREE.Mesh;
    Mesh_35: THREE.Mesh;
    Vert002: THREE.Mesh;
    Mesh_36: THREE.Mesh;
    Mesh_37: THREE.Mesh;
    Vert003: THREE.Mesh;
    Mesh_38: THREE.Mesh;
    Mesh_39: THREE.Mesh;
    Vert005: THREE.Mesh;
    Mesh_40: THREE.Mesh;
    Mesh_41: THREE.Mesh;
    Plane035: THREE.Mesh;
    Plane036: THREE.Mesh;
    Plane038: THREE.Mesh;
    Plane039: THREE.Mesh;
    Plane040: THREE.Mesh;
    Cube009: THREE.Mesh;
    Cube010: THREE.Mesh;
    Cube011: THREE.Mesh;
    Cube012: THREE.Mesh;
    Cube013: THREE.Mesh;
    Cube014: THREE.Mesh;
    Cube015: THREE.Mesh;
    Cube016: THREE.Mesh;
    Cube018: THREE.Mesh;
    Cube019: THREE.Mesh;
    Cube020: THREE.Mesh;
    Cube002: THREE.Mesh;
    Cube005: THREE.Mesh;
    Cube007: THREE.Mesh;
    Cube008: THREE.Mesh;
    Cube030: THREE.Mesh;
  };
  materials: {
    Cloth: THREE.MeshStandardMaterial;
    River: THREE.MeshStandardMaterial;
    Water: THREE.MeshPhysicalMaterial;
    Wood: THREE.MeshStandardMaterial;
    Leaves: THREE.MeshStandardMaterial;
    ["Cloth.001"]: THREE.MeshStandardMaterial;
    Brown: THREE.MeshStandardMaterial;
    Rope: THREE.MeshStandardMaterial;
    Plant: THREE.MeshStandardMaterial;
    ["Grass.001"]: THREE.MeshStandardMaterial;
    ["Brown.001"]: THREE.MeshStandardMaterial;
    Ground: THREE.MeshStandardMaterial;
    Grass: THREE.MeshStandardMaterial;
    Rock: THREE.MeshStandardMaterial;
  };
};

export function BaseGrass(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF(
    `${process.env.PUBLIC_URL}/models/camp_map.glb`
  ) as GLTFResult;
  return (
    <group {...props} dispose={null}>
      <mesh
        geometry={nodes.Plane039.geometry}
        material={materials.Grass}
        position={[-0.22, -0.03, -0.09]}
        // castShadow={true}
        receiveShadow={true}
        userData={{ ground: true }}
      />
    </group>
  );
}

function BaseGrassAndFlowers({
  page,
  otherUserId,
}: {
  page?: string;
  otherUserId?: number;
}) {
  return (
    <>
      <BaseGrass />
      <FlowersWrapper page={page} otherUserId={otherUserId} />
    </>
  );
}

export default BaseGrassAndFlowers;
